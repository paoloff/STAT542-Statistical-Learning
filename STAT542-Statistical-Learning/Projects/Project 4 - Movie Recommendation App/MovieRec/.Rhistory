prostate = read.table("https://web.stanford.edu/~hastie/ElemStatLearn/datasets/prostate.data", header = TRUE)
names(prostate)
traindata = prostate[prostate$train==TRUE,]
testdata = prostate[prostate$train==FALSE,]
dim(traindata)
dim(testdata)
traindata
traindata[1:8]
y = lm(lpsa ~ lcavo,lweight,age,lbph,svi,lcp, traindata)
y = lm(lpsa ~ lcavo,lweight,age,lbph,svi,lcp, data= traindata)
y = lm(lpsa ~[lcavo,lweight,age,lbph,svi,lcp], data= traindata)
y = lm(lpsa ~lcavo+lweight+age+lbph+svi+lcp, data= traindata)
traindata[9]
y = lm(traindata[9] ~ traindata[1]+traindata[2]+traindata[3]+traindata[4]+traindata[5]+traindata[6]+traindata[7]+ traindata[8])
y = lm(data = traindata)
View(y)
View(y)
y = lm(data = traindata[1:9])
View(y)
View(y)
z = lm(data = traindata[1:9])
View(z)
z = lm(data = traindata[1:8])
View(z)
traindata
z = lm(data = traindata[9:1])
View(z)
mean((testdata[9:1]$lpsa - predict.lm(z, test_set[9:1])) ^ 2)
mean((testdata[9:1]$lpsa - predict.lm(z, testdata[9:1])) ^ 2)
AIC(z)
r = AIC(z)
summary(r)
summary(r, k =5)
r = AIC(z, k = 4)
summary(r)
AIC(traindata)
r
z
sum((testdata[9:1]$lpsa - predict.lm(z, testdata[9:1])) ^ 2)
regsubsets(x,method = 'exhaustive')
regsubsets
regsubsets(x)
install.packages(c("mplot", "leaps", "bestglm", "car"))
regsubsets(x)
library(leaps)
regsubsets(x)
regsubsets(z, method = "exhaustive")
ttraindata[1:8]
traindata[1:8]
traindata[9]
regsubsets(y ~ ., data = traindata[9:1],. method = "exhaustive")
regsubsets(y ~ ., data = traindata[9:1],method = "exhaustive")
regsubsets(data = traindata[9:1],method = "exhaustive")
regsubsets(x = traindata[1:8], y =traindata[9],method = "exhaustive")
regsubsets(x = traindata[1:8], y =traindata[9],method = "exhaustive")
traindata[1:8]
traindata[9]
regsubsets(x = traindata[1:8], y = traindata[9],method = "exhaustive")
zz = rnorm(25)
zz
leaps(x = traindata[1:8], y = traindata[9],method = "exhaustive")
regsubsets(x = z,method = "exhaustive")
regsubsets(z,method = "exhaustive")
regsubsets(z, weights=NULL,method = "exhaustive")
regsubsets(x=z, weights=NULL,method = "exhaustive")
regsubsets(x=z, data=, weights=NULL, nbest=1, nvmax=8,
force.in=NULL, force.out=NULL, intercept=TRUE,
method="exhaustive",
really.big=FALSE,
nested=(nbest==1),...)
regsubsets(x=z, data=, weights=NULL, nbest=1, nvmax=8,
force.in=NULL, force.out=NULL, intercept=TRUE,
method="exhaustive",
really.big=FALSE,
nested=(nbest==1))
regsubsets(lpsa~., data=traindata,method = "exhaustive")
regsubsets(lpsa~., data=traindata[1:9],method = "exhaustive")
zz = regsubsets(lpsa~., data=traindata[1:9],method = "exhaustive")
summary(zz)
AIC(zz)
zz
zz[1]
zz[2]
zz[3]
zz[4]
zz[5]
zz[6]
zz[7]
zz[8]
zz[9]
zz
summary.zz
summary.regsubsets
summary(zz)
plot(zz, scale="bic")
sum_zz = summary(zz)
sum_zz$bic
which.min(sum_zz$bic)
coef(zz, 2)
which.min(sum_zz$aic)
plot(zz, scale="aic")
plot(zz, scale="Cp")
plot(zz, scale="adjr2")
zz$rss
sum_zz
sum_zz&which
sum_zz$which
n = 97
AIC <- n*log((sum_zz$which)$rss/n) + (2:9)*2
sum_which = sum_zz$which
AIC <- n*log((sum_which)$rss/n) + (2:9)*2
AIC = n*log((sum_which)$rss/n) + (2:9)*2
sum_which[1]
AIC = n*log((sum_zz)$rss/n) + (2:9)*2
AIC
AIC = n * log(sum_zz$rss/n) + 2*msize
AIC = n * log(sum_zz$rss/n) + 2*sum_zz$m_size
AIC
AIC = n * log(sum_zz$rss/n)
AIC
sum_zz$m_size
sum_zz$msize
msize
msize = apply(sum_zz$which,1,sum)
msize
AIC = n * log(sum_zz$rss/n) + 2*msize
AIC
BIC
sum_zz$bic
sum_zz$rss
Q2Auto <- read.delim("C:/Users/paolo/Desktop/Q2Auto.data")
View(Q2Auto)
Q2Auto[1]
View(Q2Auto)
View(sum_which)
Q2Auto <- read.csv("C:/Users/paolo/Desktop/Q2Auto.data", sep="")
View(Q2Auto)
Q2Auto
Q2Auto[1]
Q2Auto
Z = lm(mpg ~.,data =[Q2Auto[1],Q2Auto[3])
Q2Auto$displacement
Z = lm(mpg ~.,data =Q2Auto$displacement)
Z = lm(mpg ~.,data =Q2Auto$displacement,Q2Auto$mpg)
Z = lm(mpg ~.,x =Q2Auto$displacement)
Z = lm(mpg~displacement, data =Q2Auto)
summary(Z)
Q2Auto
Q2Auto[1:7]
Q2Auto[1:8]
Q2Auto[1:9]
Z = lm(mpg~., data =Q2Auto[1:8])
summary(Z)
s = 50 + 20*4 + 0.07*100+ 35 +0.01*4*100 -10*4
ss
s
f = 50 + 35*1 - 10*4
m = 50
f
m
set.seed(1010)
n = 1000
p = 100
nzc = trunc(p/10)
x = matrix(rnorm(n * p), n, p)
beta = rnorm(nzc)
fx = x[, seq(nzc)] %*% beta
eps = rnorm(n) * 5
y = drop(fx + eps)
px = exp(fx)
px = px/(1 + px)
ly = rbinom(n = length(px), prob = px, size = 1)
set.seed(1011)
cvob1 = cv.glmnet(x, y)
library(glmnet)
ly = rbinom(n = length(px), prob = px, size = 1)
set.seed(1011)
cvob1 = cv.glmnet(x, y)
plot(cvob1)
library("text2vec")
shiny::runApp('C:/Users/paolo/Desktop/MovieR/MovieRec')
install.packages("recommenderlab")
runApp('C:/Users/paolo/Desktop/MovieR/MovieRec')
install.packages("ShinyRatingInputs")
install.packages("ShinyRatingInput")
runApp('C:/Users/paolo/Desktop/MovieR/MovieRec')
install.packages("ShinyRatingInput")
install.packages("ShinyRatingInput")
install.packages("devtools")
devtools::install_github("stefanwilhelm/ShinyRatingInput")
runApp('C:/Users/paolo/Desktop/MovieR/MovieRec')
install.packages("shinyjs")
runApp('C:/Users/paolo/Desktop/MovieR/MovieRec')
install.packages("htmltools")
install.packages("htmltools")
shiny::runApp('C:/Users/paolo/Desktop/MovieR/MovieRec')
runApp()
setwd("C:/Users/paolo/Desktop/MovieR/MovieRec")
shiny::runApp()
runApp()
deployApp()
library("shinyapps")
install.packages("shinyapps")
